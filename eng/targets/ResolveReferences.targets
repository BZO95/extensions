<Project>

  <PropertyGroup>
    <ResolveReferencesDependsOn>
      ResolveCustomReferences;
      $(ResolveReferencesDependsOn);
    </ResolveReferencesDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <_ImplicitPackageReference Include="@(PackageReference->WithMetadataValue('IsImplicitlyDefined', 'true'))" />
    <_ExplicitPackageReference Include="@(PackageReference)" Exclude="@(_ImplicitPackageReference)" />
    <_ExplicitPackageReference Remove="Internal.AspNetCore.Sdk" />

    <UnusedProjectReferenceProvider Include="@(ProjectReferenceProvider)" Exclude="@(Reference)" />

    <!-- Order matters. Projects should be used when possible instead of packages. -->
    <_ProjectReferenceByAssemblyName Condition="'$(UseProjectReferences)' == 'true'"
      Include="@(ProjectReferenceProvider)"
      Exclude="@(UnusedProjectReferenceProvider)" />

    <ProjectReference Include="@(_ProjectReferenceByAssemblyName->'%(ProjectPath)')" />

    <Reference Remove="@(_ProjectReferenceByAssemblyName)" />
  </ItemGroup>

  <Target Name="ResolveCustomReferences" BeforeTargets="CollectPackageReferences;ResolveAssemblyReferencesDesignTime;ResolveAssemblyReferences" Condition=" '$(TargetFramework)' != '' ">
    <ItemGroup>
      <UnusedBaselinePackageReference Include="@(BaselinePackageReference)" Exclude="@(Reference);@(_ProjectReferenceByAssemblyName)" />

      <!--
        MSBuild does not provide a way to join on matching identities in a Condition,
        but you can do a cartesian product of two item groups and filter out mismatched id's in a second pass.
      -->
      <_PackageReferenceWithVersion Include="@(Reference)" Condition=" '$(UseLatestPackageReferences)' == 'true' ">
        <Id>%(LatestPackageReference.Identity)</Id>
        <Version>%(LatestPackageReference.Version)</Version>
      </_PackageReferenceWithVersion>
      <_PackageReferenceWithVersion Remove="@(_PackageReferenceWithVersion)" Condition="'%(Id)' != '%(Identity)' " />

      <!-- Remove reference items that have been resolved to a PackageReference. -->
      <Reference Remove="@(_PackageReferenceWithVersion)" />

      <_PackageReferenceWithVersion Include="@(Reference)" Condition=" '$(IsServicingBuild)' == 'true' OR '$(UseLatestPackageReferences)' != 'true' ">
        <Id>%(BaselinePackageReference.Identity)</Id>
        <Version>%(BaselinePackageReference.Version)</Version>
      </_PackageReferenceWithVersion>

      <_PackageReferenceWithVersion Remove="@(_PackageReferenceWithVersion)" Condition="'%(Id)' != '%(Identity)' " />

      <PackageReference Include="@(_PackageReferenceWithVersion)" IsImplicitlyDefined="true" />

      <Reference Remove="@(_PackageReferenceWithVersion)" />

      <!-- Free up memory for unnecessary items -->
      <_PackageReferenceWithVersion Remove="@(_PackageReferenceWithVersion)" />
      <_ExplicitPackageReference Remove="@(_ExplicitPackageReference)" />
      <_ImplicitPackageReference Remove="@(_ImplicitPackageReference)" />
    </ItemGroup>

    <Error Condition="@(_ExplicitPackageReference->Count()) != 0"
           Text="PackageReference items are not allowed. Use &lt;Reference&gt; instead. " />

    <Warning Condition="@(UnusedBaselinePackageReference->Count()) != 0"
             Text="Package references changed since the last release. This could be a breaking change. References removed:%0A - @(UnusedBaselinePackageReference, '%0A -')" />

    <Error Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework' AND '%(Reference.Identity)' != '' AND ! Exists('%(Reference.Identity)')"
           Code="MSB3245"
           Text="Could not resolve this reference. Could not locate the package or project for &quot;%(Reference.Identity)&quot;" />
  </Target>

  <Target Name="GetReferencesProvided" Returns="@(ProvidesReference)">
    <ItemGroup>
      <_TargetFramework Remove="@(_TargetFramework)" />
      <_TargetFramework Include="$(TargetFramework)" Condition="'$(TargetFramework)' != '' "/>
      <_TargetFramework Include="$(TargetFrameworks)" Condition="'$(TargetFramework)' == '' "/>
    </ItemGroup>

    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="_GetReferencesProvided"
             Properties="TargetFramework=%(_TargetFramework.Identity)">
      <Output TaskParameter="TargetOutputs" ItemName="ProvidesReference" />
    </MSBuild>
  </Target>

  <Target Name="_GetReferencesProvided" Returns="@(ProvidesReference)">
    <ItemGroup Condition=" '$(IsImplementationProject)' == 'true' ">
      <ProvidesReference Include="$(AssemblyName)">
        <ProjectFileRelativePath>$([MSBuild]::MakeRelative($(RepositoryRoot), $(MSBuildProjectFullPath)))</ProjectFileRelativePath>
      </ProvidesReference>
    </ItemGroup>
  </Target>
</Project>
