// <auto-generated />
namespace Microsoft.AspNet.Diagnostics.Entity
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
	using JetBrains.Annotations;

    public static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNet.Diagnostics.Entity.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// The string argument '{argumentName}' cannot be empty.
        /// </summary>
        public static string ArgumentIsEmpty([CanBeNull] object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The collection argument '{argumentName}' must contain at least one element.
        /// </summary>
        public static string CollectionArgumentIsEmpty([CanBeNull] object argumentName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionArgumentIsEmpty", "argumentName"), argumentName);
        }

        /// <summary>
        /// The context type '{0}' was not found in services. This usually means the context was not registered in services during startup. You probably want to call AddScoped&lt;{0}&gt;() inside the UseServices(...) call in your application startup code. Skipping display of the database error page.
        /// </summary>
        public static string DatabaseErrorPageMiddleware_ContextNotRegistered([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DatabaseErrorPageMiddleware_ContextNotRegistered"), p0);
        }

        /// <summary>
        /// An exception occurred while calculating the database error page content. Skipping display of the database error page.
        /// </summary>
        public static string DatabaseErrorPageMiddleware_Exception
        {
            get { return GetString("DatabaseErrorPageMiddleware_Exception"); }
        }

        /// <summary>
        /// &gt; k ef migration add [migration name]
        /// </summary>
        public static string DatabaseErrorPage_AddMigrationCommand
        {
            get { return GetString("DatabaseErrorPage_AddMigrationCommand"); }
        }

        /// <summary>
        /// Apply Migrations
        /// </summary>
        public static string DatabaseErrorPage_ApplyMigrationsButton
        {
            get { return GetString("DatabaseErrorPage_ApplyMigrationsButton"); }
        }

        /// <summary>
        /// Migrations Applied
        /// </summary>
        public static string DatabaseErrorPage_ApplyMigrationsButtonDone
        {
            get { return GetString("DatabaseErrorPage_ApplyMigrationsButtonDone"); }
        }

        /// <summary>
        /// Applying Migrations...
        /// </summary>
        public static string DatabaseErrorPage_ApplyMigrationsButtonRunning
        {
            get { return GetString("DatabaseErrorPage_ApplyMigrationsButtonRunning"); }
        }

        /// <summary>
        /// An error occurred applying migrations, try applying them from the command line
        /// </summary>
        public static string DatabaseErrorPage_ApplyMigrationsFailed
        {
            get { return GetString("DatabaseErrorPage_ApplyMigrationsFailed"); }
        }

        /// <summary>
        /// You can also apply migrations from the command line:
        /// </summary>
        public static string DatabaseErrorPage_HowToApplyFromCmd
        {
            get { return GetString("DatabaseErrorPage_HowToApplyFromCmd"); }
        }

        /// <summary>
        /// Try refreshing the page
        /// </summary>
        public static string DatabaseErrorPage_MigrationsAppliedRefresh
        {
            get { return GetString("DatabaseErrorPage_MigrationsAppliedRefresh"); }
        }

        /// <summary>
        /// From the command line, scaffold a new migration and apply it to the database:
        /// </summary>
        public static string DatabaseErrorPage_NoDbOrMigrationsInfo
        {
            get { return GetString("DatabaseErrorPage_NoDbOrMigrationsInfo"); }
        }

        /// <summary>
        /// Use migrations to create the database for {0}
        /// </summary>
        public static string DatabaseErrorPage_NoDbOrMigrationsTitle([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DatabaseErrorPage_NoDbOrMigrationsTitle"), p0);
        }

        /// <summary>
        /// Scaffold a new migration for these changes and apply them to the database from the command line:
        /// </summary>
        public static string DatabaseErrorPage_PendingChangesInfo
        {
            get { return GetString("DatabaseErrorPage_PendingChangesInfo"); }
        }

        /// <summary>
        /// There are pending model changes for {0}
        /// </summary>
        public static string DatabaseErrorPage_PendingChangesTitle([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DatabaseErrorPage_PendingChangesTitle"), p0);
        }

        /// <summary>
        /// There are migrations for {0} that have not been applied to the database
        /// </summary>
        public static string DatabaseErrorPage_PendingMigrationsInfo([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DatabaseErrorPage_PendingMigrationsInfo"), p0);
        }

        /// <summary>
        /// Applying existing migrations for {0} may resolve this issue
        /// </summary>
        public static string DatabaseErrorPage_PendingMigrationsTitle([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DatabaseErrorPage_PendingMigrationsTitle"), p0);
        }

        /// <summary>
        /// &gt; k ef migration apply
        /// </summary>
        public static string DatabaseErrorPage_ApplyMigrationsCommand
        {
            get { return GetString("DatabaseErrorPage_ApplyMigrationsCommand"); }
        }

        /// <summary>
        /// The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        public static string InvalidEnumValue([CanBeNull] object argumentName, [CanBeNull] object enumType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumValue", "argumentName", "enumType"), argumentName, enumType);
        }

        /// <summary>
        /// Migrations successfully applied for context '{0}'.
        /// </summary>
        public static string MigrationsEndPointMiddleware_Applied([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MigrationsEndPointMiddleware_Applied"), p0);
        }

        /// <summary>
        /// Request is valid, applying migrations for context '{0}'.
        /// </summary>
        public static string MigrationsEndPointMiddleware_ApplyingMigrations([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MigrationsEndPointMiddleware_ApplyingMigrations"), p0);
        }

        /// <summary>
        /// The context type '{0}' was not found in services. This usually means the context was not registered in services during startup. You probably want to call AddScoped&lt;{0}&gt;() inside the UseServices(...) call in your application startup code.
        /// </summary>
        public static string MigrationsEndPointMiddleware_ContextNotRegistered([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MigrationsEndPointMiddleware_ContextNotRegistered"), p0);
        }

        /// <summary>
        /// An error occurred while applying the migrations for '{0}'. See InnerException for details.
        /// </summary>
        public static string MigrationsEndPointMiddleware_Exception([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MigrationsEndPointMiddleware_Exception"), p0);
        }

        /// <summary>
        /// The context type '{0}' could not be loaded. Ensure this is the correct type name for the context you are trying to apply migrations for.
        /// </summary>
        public static string MigrationsEndPointMiddleware_InvalidContextType([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MigrationsEndPointMiddleware_InvalidContextType"), p0);
        }

        /// <summary>
        /// No context type was specified. Ensure the form data from the request includes a contextTypeName value, specifying the context to apply migrations for.
        /// </summary>
        public static string MigrationsEndPointMiddleware_NoContextType
        {
            get { return GetString("MigrationsEndPointMiddleware_NoContextType"); }
        }

        /// <summary>
        /// Request path matched the path configured for this migrations endpoint ({0}). Attempting to process the migrations request.
        /// </summary>
        public static string MigrationsEndPointMiddleware_RequestPathMatched([CanBeNull] object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MigrationsEndPointMiddleware_RequestPathMatched"), p0);
        }

        /// <summary>
        /// A database operation failed while processing the request.
        /// </summary>
        public static string DatabaseErrorPage_Title
        {
            get { return GetString("DatabaseErrorPage_Title"); }
        }

        /// <summary>
        /// To use migrations from a command prompt you will need to &lt;a href='http://go.microsoft.com/fwlink/?LinkId=518242'&gt;install K Version Manager (KVM)&lt;/a&gt;. Once installed, you can run migration commands from a standard command prompt in the project directory.
        /// </summary>
        public static string DatabaseErrorPage_EnableMigrationsCommandsInfo
        {
            get { return GetString("DatabaseErrorPage_EnableMigrationsCommandsInfo"); }
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
